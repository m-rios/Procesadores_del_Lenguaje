package analizador;
import java_cup.runtime.*;
import java.io.*;
import java.util.Stack;

/*User code*/

parser code {:
	public void syntax_error(Symbol cur_token){
		report_error("Syntax error", cur_token);
	}
	public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer(message);
       	String token = "";
		if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
			}
			token = (String) "'"+s.value+"'";
		}
		m.append(": "+token);
		System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		System.exit(1);
    }
    private updClass upd;
    public void initData(){
		this.upd = new updClass();
	}
	public void printData(){
		upd.toString();
	}
:}


/* Preliminaries to set up and use the scanner.  */
// init with {: scanner.init();              :};
// scan with {: return scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            ADESCR, CDESCR, AIDENT, CIDENT, ADATE, CDATE;
terminal 			ASTORAGE, CSTORAGE, AREGISTER, CREGISTER, ANAME, CNAME;
terminal 			AUSE, CUSE, ABITSIZE, CBITSIZE, AREGBITCODE;
terminal 			CREGBITCODE, AGROUP, AREGISTERS, CREGISTERS;
terminal 			CGROUP, AUPD, CUPD, COMA;

terminal String 	TEXT, DATE, NAME, USE, REGBITCODE;
terminal int 		BITSIZE;


terminal 			AINSNS, CINSNS, AOPCODE, COPCODE, AINSBITCODE;
terminal 			CINSBITCODE, INSBITCODE, ABEHAV, CBEHAV, CIN, COUT, AOUT;
terminal 			ACORCHETE, CCORCHETE, AIN, IN;
terminal 			AINS, CINS;



/* Non terminals */
non terminal 		especificacion, bloque_descripcion, identificacion, fecha;

non terminal 		bloque_almacenamiento, almacenamiento, registro, grupo;
non terminal 		contenido_registro, registros, registros_aux, regbitcode;

non terminal 		bloque_instrucciones, instruccion, entrada;
non terminal 		salida, in, bloque_in;
non terminal Stack	behav, insbitcode, instrucciones;

/* Precedences */
// precedence left PLUS, MINUS;


/* The grammar */
especificacion ::= 	|AUPD bloque_descripcion:descr bloque_almacenamiento:store 
					bloque_instrucciones:ins CUPD
					{:	String text = 	"------------------------\n"+
										"Descripcion:\n"+
										"------------------------\n"+
										descr+
										"------------------------\n"+
										"Almacenamiento:\n"+
										"------------------------\n"+
										// store+
										"------------------------\n"+
										"Instrucciones:\n"+
										"------------------------\n"+
										ins.toString();
						System.out.println(text);:}
					;
//se acepta fichero vacío como válido

/*gramatica bloque descripción*/
bloque_descripcion ::= 	ADESCR identificacion:id fecha:date CDESCR 
						{:RESULT = "ident: "+id+"\n date: "+date+"\n";:}
						| error 
						;

identificacion ::= 	AIDENT TEXT:id CIDENT {:RESULT = id;:}
					| error 
					;

fecha ::= 	|ADATE DATE:d CDATE {:RESULT = d;:}
			| error
			;

/*gramática bloque almacenamiento*/
bloque_almacenamiento ::= 	ASTORAGE almacenamiento CSTORAGE 
							| error 
							;

almacenamiento ::=	almacenamiento registro
					| almacenamiento grupo
					| registro
					| grupo
					;

registro ::= AREGISTER contenido_registro CREGISTER;

contenido_registro ::= 	ANAME NAME CNAME AUSE USE CUSE ABITSIZE BITSIZE CBITSIZE
						regbitcode
						;

regbitcode ::=	|AREGBITCODE REGBITCODE CREGBITCODE
				;

grupo ::= AGROUP contenido_registro AREGISTERS registros CREGISTERS CGROUP;

registros ::=  registros_aux NAME;
registros_aux ::= 	registros_aux NAME COMA
					| NAME COMA
					;

/*gramática bloque instrucciones*/
bloque_instrucciones ::= 	AINSNS instrucciones:i CINSNS {:RESULT = i;:}
							| error
							;

instrucciones ::= instrucciones:ins instruccion:in {:	ins.push(in);
														RESULT = ins;:}
				| instruccion:i {:	Stack ins = new Stack();
									ins.push(i);
									RESULT = ins;
									:}
				| error
				;

instruccion ::= AINS AOPCODE TEXT:op COPCODE entrada salida AINSBITCODE 
				insbitcode:ins CINSBITCODE ABEHAV behav:be CBEHAV CINS
				{:	insClass instruction = new insClass(op,ins,be);
					RESULT = instruction;:}
				;

insbitcode ::= insbitcode:ins COMA INSBITCODE:i {:	ins.push(i);
													RESULT = ins;
													:}
				| INSBITCODE:i {:	Stack s = new Stack();
								s.push(i);
								RESULT = s;
								:}
				;

/*entradas / salidas*/
entrada ::= | AIN bloque_in CIN
			| error
			;

bloque_in ::= 	bloque_in COMA ACORCHETE in CCORCHETE
				| ACORCHETE in CCORCHETE
				;
in ::= 	in COMA IN
		| IN
		| in COMA NAME
		| NAME
		;

salida ::= |AOUT ACORCHETE NAME CCORCHETE COUT;

/*comportamiento*/
behav ::= behav:be COMA ACORCHETE TEXT:b CCORCHETE {:	be.push(b);
														RESULT = be; :}
		| ACORCHETE TEXT:b CCORCHETE {:	Stack stack = new Stack();
										stack.push(b);
										RESULT = stack;:}
		;